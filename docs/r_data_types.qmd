---
title: "r_data_types"
format: html
execute: 
  warning: false
---

# Exploring data manipulation
Here, we will explore how to manipulate and subset data using baseR and tidyverse functions. We will also use ggplot2 to visualize newly subsetted data frames from existing ones.


### Checking data frames: Vectors, lists & data frames
This section observes how to manipulate vectors and other data types. Vectors can be indexed and subsetted without functions using the '[]'. **Refer to the comments line by line for additional information**

```{r}
vec1 <- c(2, 5, 9, 10, 8, 12, 1, 0)
class(vec1) # class is "numeric"
typeof(vec1) # vec1 is considered a "double"

# use indexing to store the third value in vec1 in a new variable
vec_1_e3 <- vec1[3]
vec_1_e3

# Access the 1st element and store as vec_1_e1
vec_1_e1 <- vec1[1]
vec_1_e1

# Access the 5th through 7th elements and store as vec_1_e5to7
vec_1_e5to7 <- vec1[5:7]
vec_1_e5to7

# Reassign vec_1 as a character using as.character, stored as vec_1_char. What does the output look like?
vec_1_char <- as.character(vec1)
vec_1_char # now each 

```
*Create a vector called vec_2*
```{r}
vec_2 <- c(town = "Santa Barbara", location = "Rincon", swell = "south")
vec_2

# What is the class of vector elements? class()
class(vec_2) #character

# What is the length of vec_2?
length(vec_2) # three observations long

# Access the 2nd element by name and store as vec_2_e2
vec_2_e2 <- vec_2[2]
vec_2_e2


```

*Create a data frame in R*
Write code to create a data frame called df_1:
```{r}
df_1 <- data.frame(region = c("A","B","A", "D"), species = c("otter", "great white", "sea lion", "gray whale"), 
                  count = c(12,2,36,6))

print(df_1)

# Return the class of the entire data frame
class(df_1)

# Return the class of the species column
class(df_1$species)

# Find the maximum value of the count() column, store as max_count
max_count <- max(df_1$count)
max_count

```


# Wild Data 

```{r}
mack_verts <- read.csv(here::here("data", "AS00601.csv"))
head(mack_verts)

```
# Wrangling and exploring
The column names can be updated to reflect cleaner naming. Then, we can use different methods of subsetting and indexing to look up species observations in different columns. 

Update the variable names in mack_verts to lower snake case
```{r}
library(tidyverse)
library(janitor)
mack_verts <- mack_verts %>% clean_names()
names(mack_verts)

# Store the 5th value in column “WEIGHT” as mc_wt_5. Check by looking at your data frame to confirm.
mc_wt_5 <- mack_verts$weight[5]
mc_wt_5

# Store the 8th - 20th value in the “LENGTH1” column as mc_length_8_20. Check by looking at your data frame to confirm.
mc_length_8_20 <- mack_verts$length1[8:20]
mc_length_8_20
# Store everything in column SAMPLEDATE as a vector called mc_dates
mc_dates <- mack_verts$sampledate
head(mc_dates)

```
# Creating a salamander subset
Use the dplyr package to subset the data only for observations for Pacific Giant Salamanders (species Dicamptodon tenebrosus, stored in species as DITE).

```{r}
names(mack_verts)
mc_salamanders <- mack_verts %>% filter(species == "DITE")
```
# Create a scatterplot of salamander length vs weight
Now, perform some data visualization on our new subsetted data frame to observe how length and weight of salamander relate to each other.

```{r}
library(ggplot2)
mc_salamanders %>% ggplot(aes(x = length1, y = weight)) + geom_point(col = "darkblue", alpha = .3, size = .9) + geom_smooth(se = F, col = "darkred") + theme_bw()  + labs(x = "Snout-vent length (millimeters)", y = "Weight (grams)", title = "Pacific Giant Salamander Snout-Vent Length Related To Individual Weight", caption = "Data courtesy of EDI Data Portal")

ggsave(filename = "salamander_size.png", path = here::here("figs"))
```
Now, create a subset called mc_trout that only contains observations for cutthroat trout (species “ONCL”)
```{r}
mc_trout <- mack_verts %>% filter(species == "ONCL")
head(mc_trout)
levels(factor(mc_trout$reach))
# Create a scatterplot of length1 by weight for all trout in the dataset
# Customize so that the point color depends on reach
colors <- c("darkblue", "darkgreen", "darkred")
mc_trout %>% ggplot(aes(x = length1, y = weight, col = factor(reach))) + geom_point(alpha = .3, size = .9) + geom_smooth(se = F, col = "black", method = lm) + scale_color_manual(values = colors) + theme_bw()  + labs(x = "Length (millimeters)", y = "Weight (grams)", title = "Cutthroat Trout Length Related To Individual Weight By Creek Path", caption = "Data courtesy of EDI Data Portal") + facet_wrap(~factor(reach)) + guides(col = F)

ggsave(filename = "cutthroat_size.png", path = here::here("figs"))

```

